generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = env("DATABASE_PRISMA_URL")
  // directUrl = env("DATABASE_URL_NON_POOLING")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                          String                        @id @default(cuid())
  name                        String?
  email                       String?                       @unique
  emailVerified               DateTime?
  image                       String?
  points                      Float                         @default(5.0)
  accounts                    Account[]
  sessions                    Session[]
  Quiz                        Quiz[]
  ComplexQuiz                 ComplexQuiz[]
  subjects                    UserSubject[]
  role                        String                        @default("student")
  CompletedUserSubjectContent CompletedUserSubjectContent[]
  lastConnection              DateTime?                     @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id           Int              @id @default(autoincrement())
  name         String
  image        String
  spanishName  String
  userSubjects UserSubject[]
  contents     SubjectContent[]
}

model SubjectContent {
  id                          Int                           @id @default(autoincrement())
  title                       String
  text                        String
  svg                         String?
  subject                     Subject                       @relation(fields: [subjectId], references: [id])
  subjectId                   Int
  CompletedUserSubjectContent CompletedUserSubjectContent[]
}

model UserSubject {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  userId    String
  subjectId Int
  completed Boolean @default(false)
}

model CompletedUserSubjectContent {
  id               Int            @id @default(autoincrement())
  contect          SubjectContent @relation(fields: [subjectContentId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
  subjectContentId Int
  completed        Boolean
  startedAt        DateTime
  finishedAt       DateTime?
  totalTimeFocused Int?
  userId           String
}

model AlternativeQuestion {
  id        Int                 @id @default(autoincrement())
  title     String
  subtitle  String?
  dificulty Int
  subject   String
  answers   AlternativeAnswer[]
  quizes    QuizQuestion[]
  deleted   Boolean             @default(false)
}

model AlternativeAnswer {
  id                    Int                 @id @default(autoincrement())
  value                 String
  hint                  String?
  isCorrect             Boolean
  alternativeQuestion   AlternativeQuestion @relation(fields: [alternativeQuestionId], references: [id])
  alternativeQuestionId Int
}

model ComplexQuestion {
  id                  Int                       @id @default(autoincrement())
  title               String
  subtitle            String?
  dificulty           Int
  subject             String
  codeToSolveEquation String
  svg                 String
  variables           ComplexQuestionVariable[]
  ComplexQuizQuestion ComplexQuizQuestion[]
  answerHint          String?
  deleted             Boolean                   @default(false)
}

model ComplexQuestionVariable {
  id                Int             @id @default(autoincrement())
  varname           String
  min               Int?
  max               Int?
  prefix            String?
  suffix            String?
  complexQuestion   ComplexQuestion @relation(fields: [complexQuestionId], references: [id])
  complexQuestionId Int
}

model Quiz {
  id                 Int            @id @default(autoincrement())
  amountOfQuestions  Int
  completedFirstTry  Boolean
  completedSecondTry Boolean
  questions          QuizQuestion[]
  user               User           @relation(fields: [userId], references: [id])
  userId             String
}

model QuizQuestion {
  id                       Int                 @id @default(autoincrement())
  quiz                     Quiz                @relation(fields: [quizId], references: [id])
  quizId                   Int
  question                 AlternativeQuestion @relation(fields: [questionId], references: [id])
  questionId               Int
  skipped                  Boolean
  answeredFirstTry         Boolean
  answeredCorrectFirstTry  Boolean?
  selectedAnswerFirstTry   Int?
  answeredSecondTry        Boolean
  answeredCorrectSecondTry Boolean?
  selectedAnswerSecondTry  Int?
}

model ComplexQuiz {
  id                  Int                   @id @default(autoincrement())
  completedFirstTry   Boolean
  completedSecondTry  Boolean
  user                User                  @relation(fields: [userId], references: [id])
  userId              String
  complexQuizQuestion ComplexQuizQuestion[]
  answerHint          String?
}

model ComplexQuizQuestion {
  id                Int             @id @default(autoincrement())
  complexQuestion   ComplexQuestion @relation(fields: [complexQuestionId], references: [id])
  complexQuiz       ComplexQuiz     @relation(fields: [complexQuizId], references: [id])
  complexQuizId     Int
  complexQuestionId Int
  svg               String
  title             String
  subtitle          String
  answer            String
}
